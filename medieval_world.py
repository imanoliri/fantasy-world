"""
This application loads the full map information file from a world generated by 'https://azgaar.github.io/Fantasy-Map-Generator/' and extends it.

World data:
    - Metadata
    - Settings
    - Pack:
        * Cells
        * Vertices
        * Features (oceans, islands, etc)
        * Cultures
        * Burgs
        * States
        * Provinces
        * Religions
        * Rivers
        * Markers
    - Grid:
        * Cells
        * Vertices
        * ...
        * Features (oceans, islands, etc)
    - biomesData:
        * i, name, color, biomesMatrix, habitability, iconsDensity, icons, cost
    - notes:
        * [(id, name, legend)]
    - nameBases (names for each culture)
    - 

Manual data:
    - Economy parameters (farmland required to feed a person, urban area required to house a person, surplus people that a farmer/fisherman can feed, etc)
    - Quartier size (600-1000) and urban and farm area use
    - Citizen consumption & production
    - Citizen random generation based on Burg data (burg type, culture type, biome, features, religion) ----()----> citizens
    

Extended data:
    - Burg:
        * Old columns: cell 2517, x 1531.65, y 524.32, state 1, i 1, culture 4, name Parabriz, feature 2, capital 1, port 0, population 25.742, type Generic, coa {...}, citadel 1, plaza 1, walls 1, shanty 1, temple 1, lock false
        * New columns:
            > from cells: biome 0, pop 0, culture 0, road 0, crossroad 0, state 0, religion 0, province 0
            > from features: type (coast, lake...), group (ocean, island, freshwater...), land & border define type of geometric definition?
            > from rivers: river 0
            > from culture: type (coastal, nomadic, generic...)

    - Cell:
        * Old columns: i 0, v [...], c [...], p [...], g 626, h 18, area 968, f 1, t 0, haven 0, harbor 0, fl 0, r 0, conf 0, biome 0, s 0, pop 0, culture 0, burg 0, road 0, crossroad 0, state 0, religion 0, province 0
"""

import json
from typing import List, Tuple

import numpy as np
import pandas as pd


def generate_extended_world_data(
    world_data_filepath: str, manual_data_filepath: str
) -> List[pd.DataFrame]:
    world_data = load_world_data(world_data_filepath)
    manual_data = load_manual_data(manual_data_filepath)

    *extended_world_data, manual_data = extend_world_data(*world_data, manual_data)
    save_world_data(world_data_filepath, extended_world_data)

    return extended_world_data


def load_world_data(filepath: str) -> Tuple[pd.DataFrame]:
    """
    World data:
        - Metadata
        - Settings
        - Pack:
            * Cells
            * Vertices
            * Features (oceans, islands, etc)
            * Cultures
            * Burgs
            * States
            * Provinces
            * Religions
            * Rivers
            * Markers
        - Grid:
            * Cells
            * Vertices
            * ...
            * Features (oceans, islands, etc)
        - biomesData:
            * i, name, color, biomesMatrix, habitability, iconsDensity, icons, cost
        - notes:
            * [(id, name, legend)]
        - nameBases (names for each culture)
    """
    return


def load_manual_data(filepath: str) -> Tuple[pd.DataFrame]:
    """
    Manual data:
        - Economy parameters (farmland required to feed a person, urban area required to house a person, surplus people that a farmer/fisherman can feed, etc)
        - Quartier size (600-1000) and urban and farm area use
        - Citizen consumption & production
        - Citizen random generation based on Burg data (burg type, culture type, biome, features, religion) ----()----> citizens
    """
    return


def extend_world_data(
    world_data: Tuple[pd.DataFrame], manual_data: Tuple[pd.DataFrame]
) -> pd.DataFrame:
    return


def save_world_data(world_data_filepath: str, world_data):
    pass
